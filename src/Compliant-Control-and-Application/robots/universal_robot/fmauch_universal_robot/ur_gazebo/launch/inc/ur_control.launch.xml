<?xml version="1.0"?>
<launch>
  <!--
    这个文件模拟加载了一个UR机器人的驱动，通过接受类似的参数并扮演类似的角色
    （即：启动驱动节点（在这里是Gazebo）并加载ros_control控制器）。

    一些给这个.launch文件的参数对于使用ur_robot_driver的人来说会很熟悉。

    其他参数特定于Gazebo。

    注意：我们在这里生成并启动ros_control控制器，因为它们，连同gazebo_ros_control，
    本质上是用于真实机器人的驱动的替代品。
  -->

  <!-- 我们与ur_robot_driver共享的参数 -->
  <arg name="controller_config_file" doc="用于定义ROS-Control控制器的配置文件。"/>
  <arg name="controllers" default="joint_state_controller pos_joint_traj_controller"/>
  <!-- <arg name="stopped_controllers" default=""/> -->
  <!-- <arg name="stopped_controllers" default="joint_group_pos_controller"/> -->

  <!-- Gazebo参数 -->
  <arg name="gazebo_model_name" default="robot" doc="在Gazebo中赋予模型的名称（在生成它之后）。" />
  <arg name="gazebo_world" default="$(find ur_gazebo)/worlds/empty.world" doc="在Gazebo中加载的'.world'文件。" />
  <arg name="gui" default="true" doc="如果为true，则启动Gazebo UI。如果为false，则只启动Gazebo服务器。" />
  <arg name="paused" default="false" doc="如果为true，则在Gazebo加载完毕后以暂停模式启动。如果为false，则一旦Gazebo加载完毕立即开始仿真。" />
  <arg name="robot_description_param_name" default="robot_description" doc="包含应该生成到Gazebo中的机器人描述（即：URDF）的参数名称。" />
  <arg name="spawn_z" default="0.0" doc="模型应该生成的高度。注意：较低的值会导致机器人与地面平面碰撞。" />
  <arg name="start_gazebo" default="true" doc="如果为true，则会启动Gazebo。如果为false，则假设Gazebo已在其他地方启动。" />
  <rosparam file="$(find ur_gazebo)/config/ur5_joint_positions.yaml" command="load"/>
  <!-- 加载控制器设置 -->
  <rosparam file="$(arg controller_config_file)" command="load"/>

  <!-- 如果需要，则启动Gazebo并加载空白世界 -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch" if="$(arg start_gazebo)">
    <arg name="world_name" value="$(arg gazebo_world)"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="gui" value="$(arg gui)"/>
  </include>

  <!-- 在刚刚启动的仿真中生成之前加载的模型 -->
  <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model"
    args="
      -urdf
      -param $(arg robot_description_param_name)
      -model $(arg gazebo_model_name)
      -z $(arg spawn_z)"
    output="screen" respawn="false" />

  <!-- 加载并启动在'controllers'参数中列出的控制器。 -->
  <node name="ros_control_controller_spawner" pkg="controller_manager" type="spawner"
    args="$(arg controllers)" output="screen" respawn="false" />

  <!-- 加载其他控制器，但不启动它们 -->
  <!-- <node name="ros_control_stopped_spawner" pkg="controller_manager" type="spawner"
    args="-/-stopped $(arg stopped_controllers)" output="screen" respawn="false" /> -->

</launch>
