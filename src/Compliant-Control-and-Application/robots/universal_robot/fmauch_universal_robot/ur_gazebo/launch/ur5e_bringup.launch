<?xml version="1.0"?>
<launch>
  <!--
    用于在Gazebo中单独加载一个UR5e机器人模型到一个空的世界中的主入口点。
    一组类似于ur_robot_driver包中加载的ros_control控制器将通过'ur_control.launch.xml'加载（注意：是*类似*，*不是*完全相同）。
    这个启动文件故意与ur_robot_driver包中的文件同名，因为它完成了相似的功能：加载配置并启动最终提供Universal Robots UR5e的ROS API的必要ROS节点。
    只不过在这种情况下，使用的是Gazebo中的虚拟模型而不是真实的机器人。
    注意1：因为这不是一个真实的机器人，所以仿真的忠实度有限。动态行为会与真实机器人不同。只支持部分主题、动作和服务。
    具体来说，不支持与控制箱本身的交互，因为Gazebo不模拟控制箱。这意味着：没有仪表盘服务器，没有URScript主题，也没有力-扭矩传感器等等。
    注意2：希望将UR5e与其他模型集成到更复杂的仿真中的用户不应修改此文件。
    相反，如果想要在自定义仿真中重用此文件，他们应该创建一个副本并更新此副本以适应所需的更改。
    在这些情况下，将此文件视为一个示例，展示了一种可能的方式，即如何为UR机器人的Gazebo仿真启动。不必完全模仿此设置。
  -->
  <!-- 机器人描述和相关参数文件 -->
  <arg name="robot_description_file" default="$(dirname)/inc/load_ur5e.launch.xml" doc="用于填充'robot_description'参数的启动文件。"/>
  <arg name="joint_limit_params" default="$(find ur_description)/config/ur5e/joint_limits.yaml"/>
  <arg name="kinematics_params" default="$(find ur_description)/config/ur5e/default_kinematics.yaml"/>
  <arg name="physical_params" default="$(find ur_description)/config/ur5e/physical_parameters.yaml"/>
  <arg name="visual_params" default="$(find ur_description)/config/ur5e/visual_parameters.yaml"/>
  <!-- 1. PositionJointInterface 2. EffortJointInterface -->
  <arg name="transmission_hw_interface" default="hardware_interface/PositionJointInterface"/>
  <arg name="environment" default="empty" doc="指定虚拟环境"/>
  <arg name="gazebo_world" default="$(find ur_gazebo)/worlds/$(arg environment).world"/>

  <!-- 控制器配置 -->
  <arg name="controller_config_file" default="$(find ur_gazebo)/config/ur5e_controllers.yaml" doc="用于定义ROS-Control控制器的配置文件。"/>
  <arg name="controllers" default="joint_state_controller" doc="默认激活的控制器。"/>
  <arg name="specified_controller" default="joint_torque_controller" doc="默认激活的控制器。"/>

  <!-- cartesian_velocity_controller joint_torque_controller-->

  <!-- robot_state_publisher配置 -->
  <arg name="tf_prefix" default="" doc="用于机器人的tf_prefix。"/>
  <arg name="tf_pub_rate" default="500" doc="robot_state_publisher应该以多快的频率发布变换。"/>

  <!-- Gazebo参数 -->
  <arg name="paused" default="false" doc="以暂停模式启动Gazebo" />
  <arg name="gui" default="true" doc="启动Gazebo gui" />

  <!-- 在参数服务器上加载urdf -->
  <include file="$(arg robot_description_file)">
    <arg name="joint_limit_params" value="$(arg joint_limit_params)"/>
    <arg name="kinematics_params" value="$(arg kinematics_params)"/>
    <arg name="physical_params" value="$(arg physical_params)"/>
    <arg name="visual_params" value="$(arg visual_params)"/>
    <arg name="transmission_hw_interface" value="$(arg transmission_hw_interface)"/>
  </include>

  <!-- 机器人状态发布者 -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="$(arg tf_pub_rate)" />
    <param name="tf_prefix" value="$(arg tf_prefix)" />
  </node>

  <!-- 启动'驱动器'（即：在这种情况下的Gazebo） -->
  <include file="$(dirname)/inc/ur_control.launch.xml">
    <arg name="controller_config_file" value="$(arg controller_config_file)"/>
    <arg name="controllers" value="$(arg controllers) $(arg specified_controller)"/>
    <arg name="gui" value="$(arg gui)"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="gazebo_world" value="$(arg gazebo_world)"/>
  </include>
</launch>
